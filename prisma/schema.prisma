generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int             @id @default(autoincrement())
  name       String          @db.VarChar(50)
  email      String          @unique @db.VarChar(50)
  password   String          @db.VarChar(50)
  carts      Cart[]
  orders     Order[]
  reviews    ServiceReview[]
  OrderTable OrderTable[]
}

model Freelancer {
  id                Int         @id @default(autoincrement())
  name              String      @db.VarChar(50)
  freelancerOrigin  String?     @db.VarChar(50)
  yearsOfExperience Int?
  services          Service[]
  orderItems        OrderItem[]
}

model Service {
  id           Int             @id @default(autoincrement())
  freelancerID Int
  name         String          @db.VarChar(50)
  description  String          @db.VarChar(50)
  price        Float           @db.Float
  freelancer   Freelancer      @relation(fields: [freelancerID], references: [id])
  cartItems    CartItem[]
  orderItems   OrderItem[]
  reviews      ServiceReview[]

  @@index([freelancerID])
}

model Order {
  id         Int         @id @default(autoincrement())
  userID     Int
  cartID     Int
  amount     Float       @db.Float
  user       User        @relation(fields: [userID], references: [id])
  cart       Cart        @relation(fields: [cartID], references: [id])
  orderItems OrderItem[]
  payments   Payment[]

  @@index([userID])
  @@index([cartID])
}

model OrderItem {
  id           Int        @id @default(autoincrement())
  orderID      Int
  freelancerID Int
  serviceID    Int
  order        Order      @relation(fields: [orderID], references: [id])
  freelancer   Freelancer @relation(fields: [freelancerID], references: [id])
  service      Service    @relation(fields: [serviceID], references: [id])

  @@index([orderID])
  @@index([freelancerID])
  @@index([serviceID])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userID    Int
  user      User       @relation(fields: [userID], references: [id])
  cartItems CartItem[]
  orders    Order[]

  @@index([userID])
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartID    Int
  serviceID Int
  cart      Cart    @relation(fields: [cartID], references: [id])
  service   Service @relation(fields: [serviceID], references: [id])

  @@index([cartID])
  @@index([serviceID])
}

model Payment {
  id            Int    @id @default(autoincrement())
  orderID       Int
  paymentMethod String @db.VarChar(50)
  order         Order  @relation(fields: [orderID], references: [id])

  @@index([orderID])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model OrderTable {
  id     Int   @id @default(autoincrement())
  userID Int
  amount Float @db.Float
  User   User  @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ordertable_ibfk_1")

  @@index([userID], map: "userID")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ServiceReview {
  id          Int     @id @default(autoincrement())
  serviceID   Int
  userID      Int
  rating      Int
  description String  @db.VarChar(300)
  service     Service @relation(fields: [serviceID], references: [id])
  user        User    @relation(fields: [userID], references: [id])

  @@index([serviceID])
  @@index([userID])
}
