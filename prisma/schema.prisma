generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id
  name          String          @db.VarChar(50)
  email         String          @unique(map: "email") @db.VarChar(50)
  password      String          @db.VarChar(50)
  Cart          Cart[]
  Order         Order[]
  OrderTable    OrderTable[]
  ServiceReview ServiceReview[]
}

model Service {
  id            Int             @id @default(autoincrement())
  freelancerID  Int
  name          String          @db.VarChar(50)
  description   String          @db.VarChar(50)
  price         Float           @db.Float
  CartItem      CartItem[]
  OrderItem     OrderItem[]
  Freelancer    Freelancer      @relation(fields: [freelancerID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "service_ibfk_1")
  ServiceReview ServiceReview[]

  @@index([freelancerID], map: "freelancerID")
}

model Order {
  id        Int         @id
  cartID    Int
  userID    Int
  amount    Float       @db.Float
  Cart      Cart        @relation(fields: [cartID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_ibfk_1")
  User      User        @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_ibfk_2")
  OrderItem OrderItem[]
  Payment   Payment[]

  @@index([cartID], map: "cartID")
  @@index([userID], map: "userID")
}

model Payment {
  id            Int    @id
  orderID       Int
  paymentMethod String @db.VarChar(50)
  Order         Order  @relation(fields: [orderID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "payment_ibfk_1")

  @@index([orderID], map: "orderID")
}

model Cart {
  id       Int        @id
  userID   Int
  User     User       @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cart_ibfk_1")
  CartItem CartItem[]
  Order    Order[]

  @@index([userID], map: "userID")
}

model CartItem {
  id        Int     @id
  cartID    Int
  serviceID Int
  Cart      Cart    @relation(fields: [cartID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cartitem_ibfk_1")
  Service   Service @relation(fields: [serviceID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cartitem_ibfk_2")

  @@index([cartID], map: "cartID")
  @@index([serviceID], map: "serviceID")
}

model Category {
  id   Int    @id
  name String @db.VarChar(50)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Freelancer {
  id                Int         @id @default(autoincrement())
  name              String      @db.VarChar(50)
  freelancerOrigin  String?     @db.VarChar(50)
  yearsOfExperience Int?
  OrderItem         OrderItem[]
  Service           Service[]
}

model OrderItem {
  id           Int        @id
  orderID      Int
  freelancerID Int
  serviceID    Int
  Order        Order      @relation(fields: [orderID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orderitem_ibfk_1")
  Freelancer   Freelancer @relation(fields: [freelancerID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orderitem_ibfk_2")
  Service      Service    @relation(fields: [serviceID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orderitem_ibfk_3")

  @@index([freelancerID], map: "freelancerID")
  @@index([orderID], map: "orderID")
  @@index([serviceID], map: "serviceID")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model OrderTable {
  id     Int   @id
  userID Int
  amount Float @db.Float
  User   User  @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ordertable_ibfk_1")

  @@index([userID], map: "userID")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ServiceReview {
  id          Int     @id
  serviceID   Int
  userID      Int
  rating      Int
  description String  @db.VarChar(300)
  Service     Service @relation(fields: [serviceID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "servicereview_ibfk_1")
  User        User    @relation(fields: [userID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "servicereview_ibfk_2")

  @@index([serviceID], map: "serviceID")
  @@index([userID], map: "userID")
}
